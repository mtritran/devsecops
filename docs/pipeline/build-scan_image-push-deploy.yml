variables:
  USER_PROJECT: "onlineshop"
  IMAGE_VERSION: "${CI_REGISTRY}/${USER_PROJECT}/${CI_PROJECT_NAME}:${CI_COMMIT_BRANCH}_${CI_COMMIT_TAG}_${CI_COMMIT_SHORT_SHA}"
  TRIVY_IMAGE_REPORT: "${CI_PROJECT_NAME}_${CI_COMMIT_BRANCH}_${CI_COMMIT_TAG}_${CI_COMMIT_SHORT_SHA}_security_scan_image"

stages:
  - build
  - security_scan_image
  - push
  - deploy

build:
  stage: build
  variables:
    GIT_STRATEGY: clone
  script:
    - docker build -t $IMAGE_VERSION .
  tags:
    - online-shop-runner-build-shell
  only:
    - tags

trivy_scan_image:
  stage: security_scan_image
  variables:
    GIT_STRATEGY: none
  script:
    - docker run --rm -v /var/run/docker.sock:/var/run/docker.sock aquasec/trivy clean --all
    - docker run --rm -v /var/run/docker.sock:/var/run/docker.sock -v /tmp:/tmp aquasec/trivy image --format template --template "@contrib/html.tpl" --output /tmp/${TRIVY_IMAGE_REPORT}.html $IMAGE_VERSION
    - cp /tmp/${TRIVY_IMAGE_REPORT}.html .
  artifacts:
    paths:
      - "${TRIVY_IMAGE_REPORT}.html"
    expire_in: 1 day
  allow_failure: false
  tags:
    - online-shop-runner-build-shell
  only:
    - tags

push:
  stage: push
  variables:
    GIT_STRATEGY: none
  before_script:
    - echo "$CI_REGISTRY_PASSWORD" | docker login -u "$CI_REGISTRY_USER" $CI_REGISTRY --password-stdin
  script:
    - docker push $IMAGE_VERSION
  after_script:
    - docker logout $CI_REGISTRY || true
  tags:
    - online-shop-runner-build-shell
  only:
    - tags

deploy:
  stage: deploy
  variables:
    GIT_STRATEGY: none
  before_script:
    - echo "$CI_REGISTRY_PASSWORD" | docker login -u "$CI_REGISTRY_USER" $CI_REGISTRY --password-stdin
  script:
    - docker rm -f $CI_PROJECT_NAME || true
    - docker pull $IMAGE_VERSION
    - sudo su ${USER_PROJECT} -c "docker run -d --name $CI_PROJECT_NAME -p $BE_PORT --restart=always $IMAGE_VERSION"
  after_script:
    - docker logout $CI_REGISTRY || true
  tags:
    - online-shop-runner-deploy-shell
  only:
    - tags
